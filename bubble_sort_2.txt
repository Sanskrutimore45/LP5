#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Parallel Bubble Sort Function
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();

    #pragma omp parallel
    {
        for (int i = 0; i < n - 1; i++) {
            #pragma omp for
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr[j], arr[j + 1]);
                }
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter elements: ";
    for (int& x : arr) {
        cin >> x;
    }

    double start, end;

    start = omp_get_wtime(); // Start timing the sort
    parallelBubbleSort(arr);    // Call the parallel bubble sort function
    end = omp_get_wtime();     // End timing

    cout << "Parallel Bubble Sort: ";
    for (int x : arr) {
        cout << x << " ";       // Output sorted elements
    }
    cout << "\nTime: " << (end - start) << " sec\n"; // Output time taken

    return 0;
}
// use this to compile the code: 
// sudo apt update 
// sudo apt install gcc g++ libomp-dev 
// g++ -fopenmp your_code.cpp -o output