#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
    int V; 
    vector<vector<int>> adj; 

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int u, int v) {
        if (u >= 0 && u < V && v >= 0 && v < V) { 
            adj[u].push_back(v);
            adj[v].push_back(u);
        } else {
            cout << "Invalid edge: (" << u << ", " << v << ")" << endl;
        }
    }


    void parallelDFS(int start) {
        vector<bool> vis(V, false);
        stack<int> s;
        s.push(start);

        #pragma omp parallel
        {
            while (true) {
                int node = -1;

                #pragma omp critical
                {
                    if (!s.empty()) {
                        node = s.top();
                        s.pop();
                    }
                }

                if (node == -1) {
                    break; 
                }

                if (!vis[node]) {
                    vis[node] = true;

                    #pragma omp critical
                    {
                        cout << node << " ";
                    }

                    vector<int> neighbors;
                    for (int n : adj[node]) {
                        if (!vis[n]) {
                            neighbors.push_back(n);
                        }
                    }
                    #pragma omp critical
                    {
                        for (int n : neighbors) {
                            s.push(n);
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int V, E, u, v, start;

    cout << "Vertices: ";
    cin >> V;
    Graph g(V);

    cout << "Edges: ";
    cin >> E;
    cout << "Enter edges: \n";
    while (E--) {
        cin >> u >> v;
        g.addEdge(u, v); 
    }

    cout << "Start node: ";
    cin >> start;
    if (start < 0 || start >= V) {
        cout << "Invalid starting node!" << endl;
        return 1; 
    }

    cout << "\nDFS: ";
    g.parallelDFS(start);
    cout << endl;

    return 0;
}