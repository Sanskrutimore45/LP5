#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

// Parallel Bubble Sort
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        // Each iteration of the outer loop allows parallel comparison-swaps
        #pragma omp parallel for
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// Merge function for Merge Sort
void merge(vector<int>& arr, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        temp[k++] = (arr[i] < arr[j]) ? arr[i++] : arr[j++];
    }
    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];

    for (int m = 0; m < k; m++) {
        arr[left + m] = temp[m];
    }
}

// Parallel Merge Sort
void parallelMergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;

    int mid = left + (right - left) / 2;

    #pragma omp parallel sections
    {
        #pragma omp section
        parallelMergeSort(arr, left, mid);

        #pragma omp section
        parallelMergeSort(arr, mid + 1, right);
    }

    merge(arr, left, mid, right);
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> arr(n), arr2;
    cout << "Enter elements: ";
    for (int& x : arr) cin >> x;

    arr2 = arr; // Copy for second sort

    // Bubble Sort timing
    double start = omp_get_wtime();
    parallelBubbleSort(arr);
    double end = omp_get_wtime();

    cout << "Parallel Bubble Sort: ";
    for (int x : arr) cout << x << " ";
    cout << "\nTime: " << (end - start) << " sec\n";

    // Merge Sort timing
    start = omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        parallelMergeSort(arr2, 0, n - 1);
    }
    end = omp_get_wtime();

    cout << "Parallel Merge Sort: ";
    for (int x : arr2) cout << x << " ";
    cout << "\nTime: " << (end - start) << " sec\n";

    return 0;
}



// use this to compile the code: 
// sudo apt update 
// sudo apt install gcc g++ libomp-dev 
// g++ -fopenmp your_code.cpp -o output
